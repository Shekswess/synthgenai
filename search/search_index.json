{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SynthGenAI Documentation \ud83d\udcda","text":"<p> Making Synthetic Data Easy </p> <p>Welcome to the SynthGenAI documentation. SynthGenAI is a package for generating synthetic datasets using LLMs. This documentation will guide you through the installation, usage, and examples of how to use SynthGenAI.</p>"},{"location":"#overview","title":"Overview \ud83e\uddd0","text":"<p>SynthGenAI is designed to be modular and can be easily extended to include different API providers for LLMs and new features.</p>"},{"location":"#why-synthgenai","title":"Why SynthGenAI? \ud83e\udd14","text":"<p>Interest in synthetic data generation has surged recently, driven by the growing recognition of data as a critical asset in AI development. As Ilya Sutskever, one of the most important figures in AI, says: 'Data is the fossil fuel of AI.' The more quality data we have, the better our models can perform.</p> <p>However, access to data is often restricted due to privacy concerns, or it may be prohibitively expensive to collect. Additionally, the vast amount of high-quality data on the internet has already been extensively mined. Synthetic data generation addresses these challenges by allowing us to create diverse and useful datasets using current pre-trained Large Language Models (LLMs).</p> <p>Beyond LLMs, synthetic data also holds immense potential for pre-training and post-training of Small Language Models (SLMs), which are gaining popularity due to their efficiency and suitability for specific, resource-constrained applications. By leveraging synthetic data for both LLMs and SLMs, we can enhance performance across a wide range of use cases while balancing resource efficiency and model effectiveness. This approach enables us to harness the strengths of both synthetic and authentic datasets to achieve optimal outcomes.</p>"},{"location":"#tools-used-for-building-synthgenai","title":"Tools used for building SynthGenAI \ud83e\uddf0","text":"<p>The package is built using Python and the following libraries:</p> <ul> <li>uv</li> <li>LiteLLM</li> <li>Langfuse</li> <li>Pydantic</li> <li>Huggingface Hub &amp; Datasets</li> </ul>"},{"location":"#contributing","title":"Contributing \ud83e\udd1d","text":"<p>If you want to contribute to this project and make it better, your help is very welcome. Create a pull request with your changes and I will review it. If you have any questions, open an issue.</p>"},{"location":"#license","title":"License \ud83d\udcdd","text":"<p>This project is licensed under the MIT License.</p>"},{"location":"configurations/","title":"Configuration Types \u2699\ufe0f","text":"<p>SynthGenAI uses three main configuration types to generate synthetic datasets. These configurations work together to define the dataset parameters, LLM settings, and overall generation process:</p> <ul> <li>Dataset Configuration - Configure dataset parameters like topic, domains, language, and number of entries</li> <li>LLM Configuration - Configure the language model settings including model selection, temperature, and API credentials</li> <li>Dataset Generator Configuration - Combine dataset and LLM configurations for the complete generation setup</li> </ul>"},{"location":"configurations/#configuration-overview","title":"Configuration Overview \ud83d\udd27","text":""},{"location":"configurations/#dataset-configuration","title":"Dataset Configuration","text":"<p>The <code>DatasetConfig</code> defines what kind of dataset you want to generate, including:</p> <ul> <li>Topic and domains</li> <li>Target language</li> <li>Number of entries</li> <li>Additional descriptions</li> </ul>"},{"location":"configurations/#llm-configuration","title":"LLM Configuration","text":"<p>The <code>LLMConfig</code> specifies which language model to use and how, including:</p> <ul> <li>Model provider and name</li> <li>Generation parameters (temperature, top_p, max_tokens)</li> <li>API credentials and endpoints</li> </ul>"},{"location":"configurations/#dataset-generator-configuration","title":"Dataset Generator Configuration","text":"<p>The <code>DatasetGeneratorConfig</code> combines both configurations to create a complete setup for dataset generation across all supported dataset types.</p>"},{"location":"configurations/#environment-variables","title":"Environment Variables \ud83d\udd10","text":"<p>SynthGenAI uses several environment variables to control behavior and configuration:</p>"},{"location":"configurations/#logging-configuration","title":"Logging Configuration","text":"<ul> <li><code>SYNTHGENAI_DETAILED_MODE</code> - Controls logging verbosity</li> <li><code>\"true\"</code> (default): Minimal logging output, recommended for production</li> <li><code>\"false\"</code>: Detailed debug logging, useful for development and troubleshooting</li> </ul> <pre><code># Enable detailed logging for debugging\nexport SYNTHGENAI_DETAILED_MODE=\"false\"\n\n# No logging (default)\nexport SYNTHGENAI_DETAILED_MODE=\"true\"\n</code></pre>"},{"location":"configurations/#api-configuration","title":"API Configuration","text":"<p>Environment variables for different LLM providers are documented in the LLM Configuration section.</p>"},{"location":"configurations/#usage-pattern","title":"Usage Pattern \ud83d\udccb","text":"<p>All dataset generators follow the same configuration pattern:</p> <ol> <li>Create a <code>DatasetConfig</code> with your dataset requirements</li> <li>Create an <code>LLMConfig</code> with your preferred language model settings</li> <li>Combine them into a <code>DatasetGeneratorConfig</code></li> <li>Use this configuration with any dataset generator type</li> </ol> <p>This unified approach ensures consistency across all dataset types while providing the flexibility to customize both the dataset characteristics and the underlying language model behavior.</p>"},{"location":"configurations/dataset_configuration/","title":"Dataset Configuration \ud83d\udcda","text":"<p>To configure the datasets for generation, you need to create a <code>DatasetConfig</code> object. This object contains the configuration for the dataset, including the topic, domains, language, additional description, and the number of entries.</p>"},{"location":"configurations/dataset_configuration/#example","title":"Example \ud83d\udcd6","text":"<pre><code>from synthgenai import DatasetConfig\n\n# Creating the DatasetConfig\ndataset_config = DatasetConfig(\n    topic=\"topic_name\",\n    domains=[\"domain1\", \"domain2\"],\n    language=\"English\",\n    additional_description=\"Additional description\",\n    num_entries=1000\n)\n</code></pre>"},{"location":"configurations/dataset_configuration/#parameters","title":"Parameters \ud83c\udf9b","text":"<ul> <li><code>topic</code> (str): The topic of the dataset. (Required)</li> <li><code>domains</code> (list[str]): A list of domains related to the dataset. Must contain at least one item. (Required)</li> <li><code>language</code> (str): The language of the dataset. Default is \"English\". (Optional)</li> <li><code>additional_description</code> (str): Any additional description for the dataset. Maximum length is 1000 characters. (Optional, default: \"\")</li> <li><code>num_entries</code> (int): The number of entries to generate. Must be greater than 1. (Optional, default: 1000)</li> </ul> <p>For more information on configuring datasets, refer to the SynthGenAI documentation.</p>"},{"location":"configurations/dataset_generator_configuration/","title":"Dataset Generator Configuration \ud83c\udfed","text":"<p>To configure the dataset generator, you need to create a <code>DatasetGeneratorConfig</code> object. This object contains the configuration for both the dataset and the LLM model.</p>"},{"location":"configurations/dataset_generator_configuration/#example","title":"Example \ud83d\udcd6","text":"<pre><code>from synthgenai import DatasetConfig, LLMConfig, DatasetGeneratorConfig\n\n# Creating the DatasetConfig\ndataset_config = DatasetConfig(\n    topic=\"topic_name\",\n    domains=[\"domain1\", \"domain2\"],\n    language=\"English\",\n    additional_description=\"Additional description\",\n    num_entries=1000\n)\n\n# Creating the LLMConfig\nllm_config = LLMConfig(\n    model=\"model_provider/model_name\",\n    temperature=0.5,\n    top_p=0.9,\n    max_tokens=2048,\n    api_base=\"https://api.example.com\",\n    api_key=\"your_api_key\"\n)\n\n# Creating the DatasetGeneratorConfig\ndataset_generator_config = DatasetGeneratorConfig(\n    dataset_config=dataset_config,\n    llm_config=llm_config\n)\n</code></pre>"},{"location":"configurations/dataset_generator_configuration/#parameters","title":"Parameters \ud83c\udf9b","text":"<ul> <li><code>dataset_config</code> (DatasetConfig): The configuration for the dataset. (Required)</li> <li><code>llm_config</code> (LLMConfig): The configuration for the LLM. (Required)</li> </ul> <p>For more information on configuring the dataset generator, refer to the SynthGenAI documentation.</p>"},{"location":"configurations/llm_configuration/","title":"LLM Configuration \ud83e\udd16","text":"<p>To configure the LLMs for generating datasets, you need to create an <code>LLMConfig</code> object. This object contains the configuration for the LLM model, including the model name, temperature, top_p, and max_tokens.</p>"},{"location":"configurations/llm_configuration/#example","title":"Example \ud83d\udcd6","text":"<pre><code>from synthgenai import LLMConfig\n\n# Creating the LLMConfig\nllm_config = LLMConfig(\n    model=\"model_provider/model_name\", # Check LiteLLM docs for more info\n    temperature=0.5,\n    top_p=0.9,\n    max_tokens=2048,\n    api_base=\"https://api.example.com\",\n    api_key=\"your_api_key\"\n)\n</code></pre>"},{"location":"configurations/llm_configuration/#parameters","title":"Parameters \ud83c\udf9b","text":"<ul> <li><code>model</code> (str): The name of the model to use. This should be in the format <code>model_provider/model_name</code>. (Required)</li> <li><code>temperature</code> (float): The temperature to use for the model. This controls the randomness of the generated text. Must be between 0.0 and 1.0. (Optional, default: None)</li> <li><code>top_p</code> (float): The top_p value to use for the model. This controls the nucleus sampling. Must be between 0.0 and 1.0. (Optional, default: None)</li> <li><code>max_tokens</code> (int): The maximum number of tokens to generate. Must be greater than 1000. (Optional, default: None)</li> <li><code>api_base</code> (AnyUrl): The API base URL for the LLM service. (Optional, default: None)</li> <li><code>api_key</code> (str): The API key for authenticating with the LLM service. (Optional, default: None)</li> </ul> <p>For more information on the available models and their configurations, refer to the LiteLLM documentation.</p>"},{"location":"contributing/","title":"Contributing \ud83e\udd1d","text":"<p>If you want to contribute to this project and make it better, your help is very welcome. Create a pull request with your changes and I will review it. If you have any questions, open an issue.</p>"},{"location":"contributing/#how-to-contribute-i","title":"How to Contribute \u2139\ufe0f","text":"<ol> <li>Fork the repository</li> <li>Create a new branch (<code>git checkout -b feature-branch</code>)</li> <li>Make your changes</li> <li>Commit your changes (<code>git commit -m 'Add some feature'</code>)</li> <li>Push to the branch (<code>git push origin feature-branch</code>)</li> <li>Open a pull request</li> </ol>"},{"location":"datasets/","title":"Dataset Types \ud83d\udcda","text":"<p>Currently, there are six types of datasets that can be generated using SynthGenAI:</p> <ul> <li>Raw Datasets</li> <li>Instruction Datasets</li> <li>Preference Datasets</li> <li>Sentiment Analysis Datasets</li> <li>Summarization Datasets</li> <li>Text Classification Datasets</li> </ul> <p>The datasets can be generated:</p> <ul> <li>Synchronously - each dataset entry is generated one by one</li> <li>Asynchronously - batch of dataset entries is generated at once</li> </ul>"},{"location":"datasets/instruction_datasets/","title":"Instruction Datasets \ud83d\udcac","text":"<p>To generate an Instruction dataset, you need to use the <code>InstructionDatasetGenerator</code> class.</p> <pre><code>from synthgenai import InstructionDatasetGenerator\n</code></pre> <p>Example of generated entry for the instruction dataset:</p> <pre><code>{\n  \"keyword\": \"keyword\",\n  \"topic\": \"topic\",\n  \"language\": \"language\",\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"generated system(instruction) prompt\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"generated user prompt\"\n    },\n    {\n      \"role\": \"assistant\",\n      \"content\": \"generated assistant prompt\"\n    }\n  ]\n}\n</code></pre>"},{"location":"datasets/instruction_datasets/#synchronous-generation","title":"Synchronous Generation \ud83d\udd01","text":"<pre><code>import os\nfrom synthgenai import (\n    DatasetConfig,\n    DatasetGeneratorConfig,\n    LLMConfig,\n    InstructionDatasetGenerator,\n)\n\n# Setting the API keys\nos.environ[\"LLM_API_KEY\"] = \"\"\n\n# Creating the LLMConfig\nllm_config = LLMConfig(\n    model=\"model_provider/model_name\",\n    temperature=0.5,\n    top_p=0.9,\n    max_tokens=2048,\n)\n\n# Creating the DatasetConfig\ndataset_config = DatasetConfig(\n    topic=\"topic_name\",\n    domains=[\"domain1\", \"domain2\"],\n    language=\"English\",\n    additional_description=\"Additional description\",\n    num_entries=1000\n)\n\n# Creating the DatasetGeneratorConfig\ndataset_generator_config = DatasetGeneratorConfig(\n    llm_config=llm_config,\n    dataset_config=dataset_config,\n)\n\n# Creating the InstructionDatasetGenerator\ninstruction_dataset_generator = InstructionDatasetGenerator(dataset_generator_config)\n\n# Generating the dataset\ninstruction_dataset = instruction_dataset_generator.generate_dataset()\n</code></pre>"},{"location":"datasets/instruction_datasets/#asynchronous-generation","title":"Asynchronous Generation \ud83d\udd00","text":"<pre><code>import os\nimport asyncio\nfrom synthgenai import (\n    DatasetConfig,\n    DatasetGeneratorConfig,\n    LLMConfig,\n    InstructionDatasetGenerator,\n)\n\n# Setting the API keys\nos.environ[\"LLM_API_KEY\"] = \"\"\n\n# Creating the LLMConfig\nllm_config = LLMConfig(\n    model=\"model_provider/model_name\",\n    temperature=0.5,\n    top_p=0.9,\n    max_tokens=2048,\n)\n\n# Creating the DatasetConfig\ndataset_config = DatasetConfig(\n    topic=\"topic_name\",\n    domains=[\"domain1\", \"domain2\"],\n    language=\"English\",\n    additional_description=\"Additional description\",\n    num_entries=1000\n)\n\n# Creating the DatasetGeneratorConfig\ndataset_generator_config = DatasetGeneratorConfig(\n    llm_config=llm_config,\n    dataset_config=dataset_config,\n)\n\n# Creating the InstructionDatasetGenerator\ninstruction_dataset_generator = InstructionDatasetGenerator(dataset_generator_config)\n\n# Generating the dataset asynchronously\ninstruction_dataset = asyncio.run(instruction_dataset_generator.agenerate_dataset())\n</code></pre>"},{"location":"datasets/preference_datasets/","title":"Preference Datasets \ud83c\udf1f","text":"<p>To generate a Preference dataset, you need to use the <code>PreferenceDatasetGenerator</code> class.</p> <pre><code>from synthgenai import PreferenceDatasetGenerator\n</code></pre> <p>Example of generated entry for the preference dataset:</p> <pre><code>{\n  \"keyword\": \"keyword\",\n  \"topic\": \"topic\",\n  \"language\": \"language\",\n  \"prompt\": [\n    { \"role\": \"system\", \"content\": \"generated system(instruction) prompt\" },\n    { \"role\": \"user\", \"content\": \"generated user prompt\" }\n  ],\n  \"chosen\": [\n    { \"role\": \"assistant\", \"content\": \"generated chosen assistant response\" }\n  ],\n  \"rejected\": [\n    {\n      \"role\": \"assistant\",\n      \"content\": \"generated rejected assistant response\"\n    }\n  ]\n}\n</code></pre>"},{"location":"datasets/preference_datasets/#synchronous-generation","title":"Synchronous Generation \ud83d\udd01","text":"<pre><code>import os\nfrom synthgenai import (\n    DatasetConfig,\n    DatasetGeneratorConfig,\n    LLMConfig,\n    PreferenceDatasetGenerator,\n)\n\n# Setting the API keys\nos.environ[\"LLM_API_KEY\"] = \"\"\n\n# Creating the LLMConfig\nllm_config = LLMConfig(\n    model=\"model_provider/model_name\",\n    temperature=0.5,\n    top_p=0.9,\n    max_tokens=2048,\n)\n\n# Creating the DatasetConfig\ndataset_config = DatasetConfig(\n    topic=\"topic_name\",\n    domains=[\"domain1\", \"domain2\"],\n    language=\"English\",\n    additional_description=\"Additional description\",\n    num_entries=1000\n)\n\n# Creating the DatasetGeneratorConfig\ndataset_generator_config = DatasetGeneratorConfig(\n    llm_config=llm_config,\n    dataset_config=dataset_config,\n)\n\n# Creating the PreferenceDatasetGenerator\npreference_dataset_generator = PreferenceDatasetGenerator(dataset_generator_config)\n\n# Generating the dataset\npreference_dataset = preference_dataset_generator.generate_dataset()\n</code></pre>"},{"location":"datasets/preference_datasets/#asynchronous-generation","title":"Asynchronous Generation \ud83d\udd00","text":"<pre><code>import os\nimport asyncio\nfrom synthgenai import (\n    DatasetConfig,\n    DatasetGeneratorConfig,\n    LLMConfig,\n    PreferenceDatasetGenerator,\n)\n\n# Setting the API keys\nos.environ[\"LLM_API_KEY\"] = \"\"\n\n# Creating the LLMConfig\nllm_config = LLMConfig(\n    model=\"model_provider/model_name\",\n    temperature=0.5,\n    top_p=0.9,\n    max_tokens=2048,\n)\n\n# Creating the DatasetConfig\ndataset_config = DatasetConfig(\n    topic=\"topic_name\",\n    domains=[\"domain1\", \"domain2\"],\n    language=\"English\",\n    additional_description=\"Additional description\",\n    num_entries=1000\n)\n\n# Creating the DatasetGeneratorConfig\ndataset_generator_config = DatasetGeneratorConfig(\n    llm_config=llm_config,\n    dataset_config=dataset_config,\n)\n\n# Creating the PreferenceDatasetGenerator\npreference_dataset_generator = PreferenceDatasetGenerator(dataset_generator_config)\n\n# Generating the dataset asynchronously\npreference_dataset = asyncio.run(preference_dataset_generator.agenerate_dataset())\n</code></pre>"},{"location":"datasets/raw_datasets/","title":"Raw Datasets \ud83e\udd69","text":"<p>To generate a Raw dataset, you need to use the <code>RawDatasetGenerator</code> class.</p> <pre><code>from synthgenai import RawDatasetGenerator\n</code></pre> <p>Example of generated entry for the raw dataset:</p> <pre><code>{\n  \"keyword\": \"keyword\",\n  \"topic\": \"topic\",\n  \"language\": \"language\",\n  \"text\": \"generated text\"\n}\n</code></pre>"},{"location":"datasets/raw_datasets/#synchronous-generation","title":"Synchronous Generation \ud83d\udd01","text":"<pre><code>import os\nfrom synthgenai import (\n    DatasetConfig,\n    DatasetGeneratorConfig,\n    LLMConfig,\n    RawDatasetGenerator,\n)\n\n# Setting the API keys\nos.environ[\"LLM_API_KEY\"] = \"\"\n\n# Creating the LLMConfig\nllm_config = LLMConfig(\n    model=\"model_provider/model_name\",\n    temperature=0.5,\n    top_p=0.9,\n    max_tokens=2048,\n)\n\n# Creating the DatasetConfig\ndataset_config = DatasetConfig(\n    topic=\"topic_name\",\n    domains=[\"domain1\", \"domain2\"],\n    language=\"English\",\n    additional_description=\"Additional description\",\n    num_entries=1000\n)\n\n# Creating the DatasetGeneratorConfig\ndataset_generator_config = DatasetGeneratorConfig(\n    llm_config=llm_config,\n    dataset_config=dataset_config,\n)\n\n# Creating the RawDatasetGenerator\nraw_dataset_generator = RawDatasetGenerator(dataset_generator_config)\n\n# Generating the dataset\nraw_dataset = raw_dataset_generator.generate_dataset()\n</code></pre>"},{"location":"datasets/raw_datasets/#asynchronous-generation","title":"Asynchronous Generation \ud83d\udd00","text":"<pre><code>import os\nimport asyncio\nfrom synthgenai import (\n    DatasetConfig,\n    DatasetGeneratorConfig,\n    LLMConfig,\n    RawDatasetGenerator,\n)\n\n# Setting the API keys\nos.environ[\"LLM_API_KEY\"] = \"\"\n\n# Creating the LLMConfig\nllm_config = LLMConfig(\n    model=\"model_provider/model_name\",\n    temperature=0.5,\n    top_p=0.9,\n    max_tokens=2048,\n)\n\n# Creating the DatasetConfig\ndataset_config = DatasetConfig(\n    topic=\"topic_name\",\n    domains=[\"domain1\", \"domain2\"],\n    language=\"English\",\n    additional_description=\"Additional description\",\n    num_entries=1000\n)\n\n# Creating the DatasetGeneratorConfig\ndataset_generator_config = DatasetGeneratorConfig(\n    llm_config=llm_config,\n    dataset_config=dataset_config,\n)\n\n# Creating the RawDatasetGenerator\nraw_dataset_generator = RawDatasetGenerator(dataset_generator_config)\n\n# Generating the dataset asynchronously\nraw_dataset = asyncio.run(raw_dataset_generator.agenerate_dataset())\n</code></pre>"},{"location":"datasets/sentiment_analysis_datasets/","title":"Sentiment Analysis Datasets \ud83c\udfad","text":"<p>To generate a Sentiment Analysis dataset, you need to use the <code>SentimentAnalysisDatasetGenerator</code> class.</p> <pre><code>from synthgenai import SentimentAnalysisDatasetGenerator\n</code></pre> <p>Example of generated entry for the sentiment analysis dataset:</p> <pre><code>{\n  \"keyword\": \"keyword\",\n  \"topic\": \"topic\",\n  \"language\": \"language\",\n  \"prompt\": \"generated text\",\n  \"label\": \"generated sentiment (which can be positive, negative, neutral)\"\n}\n</code></pre>"},{"location":"datasets/sentiment_analysis_datasets/#synchronous-generation","title":"Synchronous Generation \ud83d\udd01","text":"<pre><code>import os\nfrom synthgenai import (\n    DatasetConfig,\n    DatasetGeneratorConfig,\n    LLMConfig,\n    SentimentAnalysisDatasetGenerator,\n)\n\n# Setting the API keys\nos.environ[\"LLM_API_KEY\"] = \"\"\n\n# Creating the LLMConfig\nllm_config = LLMConfig(\n    model=\"model_provider/model_name\",\n    temperature=0.5,\n    top_p=0.9,\n    max_tokens=2048,\n)\n\n# Creating the DatasetConfig\ndataset_config = DatasetConfig(\n    topic=\"topic_name\",\n    domains=[\"domain1\", \"domain2\"],\n    language=\"English\",\n    additional_description=\"Additional description\",\n    num_entries=1000\n)\n\n# Creating the DatasetGeneratorConfig\ndataset_generator_config = DatasetGeneratorConfig(\n    llm_config=llm_config,\n    dataset_config=dataset_config,\n)\n\n# Creating the SentimentAnalysisDatasetGenerator\nsentiment_analysis_dataset_generator = SentimentAnalysisDatasetGenerator(dataset_generator_config)\n\n# Generating the dataset\nsentiment_analysis_dataset = sentiment_analysis_dataset_generator.generate_dataset()\n</code></pre>"},{"location":"datasets/sentiment_analysis_datasets/#asynchronous-generation","title":"Asynchronous Generation \ud83d\udd00","text":"<pre><code>import os\nimport asyncio\nfrom synthgenai import (\n    DatasetConfig,\n    DatasetGeneratorConfig,\n    LLMConfig,\n    SentimentAnalysisDatasetGenerator,\n)\n\n# Setting the API keys\nos.environ[\"LLM_API_KEY\"] = \"\"\n\n# Creating the LLMConfig\nllm_config = LLMConfig(\n    model=\"model_provider/model_name\",\n    temperature=0.5,\n    top_p=0.9,\n    max_tokens=2048,\n)\n\n# Creating the DatasetConfig\ndataset_config = DatasetConfig(\n    topic=\"topic_name\",\n    domains=[\"domain1\", \"domain2\"],\n    language=\"English\",\n    additional_description=\"Additional description\",\n    num_entries=1000\n)\n\n# Creating the DatasetGeneratorConfig\ndataset_generator_config = DatasetGeneratorConfig(\n    llm_config=llm_config,\n    dataset_config=dataset_config,\n)\n\n# Creating the SentimentAnalysisDatasetGenerator\nsentiment_analysis_dataset_generator = SentimentAnalysisDatasetGenerator(dataset_generator_config)\n\n# Generating the dataset asynchronously\nsentiment_analysis_dataset = asyncio.run(sentiment_analysis_dataset_generator.agenerate_dataset())\n</code></pre>"},{"location":"datasets/summarization_datasets/","title":"Summarization Datasets \ud83e\uddfe","text":"<p>To generate a Summarization dataset, you need to use the <code>SummarizationDatasetGenerator</code> class.</p> <pre><code>from synthgenai import SummarizationDatasetGenerator\n</code></pre> <p>Example of generated entry for the summarization dataset:</p> <pre><code>{\n  \"keyword\": \"keyword\",\n  \"topic\": \"topic\",\n  \"language\": \"language\",\n  \"text\": \"generated text\",\n  \"summary\": \"generated summary\"\n}\n</code></pre>"},{"location":"datasets/summarization_datasets/#synchronous-generation","title":"Synchronous Generation \ud83d\udd01","text":"<pre><code>import os\nfrom synthgenai import (\n    DatasetConfig,\n    DatasetGeneratorConfig,\n    LLMConfig,\n    SummarizationDatasetGenerator,\n)\n\n# Setting the API keys\nos.environ[\"LLM_API_KEY\"] = \"\"\n\n# Creating the LLMConfig\nllm_config = LLMConfig(\n    model=\"model_provider/model_name\",\n    temperature=0.5,\n    top_p=0.9,\n    max_tokens=2048,\n)\n\n# Creating the DatasetConfig\ndataset_config = DatasetConfig(\n    topic=\"topic_name\",\n    domains=[\"domain1\", \"domain2\"],\n    language=\"English\",\n    additional_description=\"Additional description\",\n    num_entries=1000\n)\n\n# Creating the DatasetGeneratorConfig\ndataset_generator_config = DatasetGeneratorConfig(\n    llm_config=llm_config,\n    dataset_config=dataset_config,\n)\n\n# Creating the SummarizationDatasetGenerator\nsummarization_dataset_generator = SummarizationDatasetGenerator(dataset_generator_config)\n\n# Generating the dataset\nsummarization_dataset = summarization_dataset_generator.generate_dataset()\n</code></pre>"},{"location":"datasets/summarization_datasets/#asynchronous-generation","title":"Asynchronous Generation \ud83d\udd00","text":"<pre><code>import os\nimport asyncio\nfrom synthgenai import (\n    DatasetConfig,\n    DatasetGeneratorConfig,\n    LLMConfig,\n    SummarizationDatasetGenerator,\n)\n\n# Setting the API keys\nos.environ[\"LLM_API_KEY\"] = \"\"\n\n# Creating the LLMConfig\nllm_config = LLMConfig(\n    model=\"model_provider/model_name\",\n    temperature=0.5,\n    top_p=0.9,\n    max_tokens=2048,\n)\n\n# Creating the DatasetConfig\ndataset_config = DatasetConfig(\n    topic=\"topic_name\",\n    domains=[\"domain1\", \"domain2\"],\n    language=\"English\",\n    additional_description=\"Additional description\",\n    num_entries=1000\n)\n\n# Creating the DatasetGeneratorConfig\ndataset_generator_config = DatasetGeneratorConfig(\n    llm_config=llm_config,\n    dataset_config=dataset_config,\n)\n\n# Creating the SummarizationDatasetGenerator\nsummarization_dataset_generator = SummarizationDatasetGenerator(dataset_generator_config)\n\n# Generating the dataset asynchronously\nsummarization_dataset = asyncio.run(summarization_dataset_generator.agenerate_dataset())\n</code></pre>"},{"location":"datasets/text_classification_datasets/","title":"Text Classification Datasets \ud83d\udd20","text":"<p>To generate a Text Classification dataset, you need to use the <code>TextClassificationDatasetGenerator</code> class.</p> <pre><code>from synthgenai import TextClassificationDatasetGenerator\n</code></pre> <p>Example of generated entry for the text classification dataset:</p> <pre><code>{\n  \"keyword\": \"keyword\",\n  \"topic\": \"topic\",\n  \"language\": \"language\",\n  \"prompt\": \"generated text\",\n  \"label\": \"generated sentiment (which will be from a list of labels, created from the model)\"\n}\n</code></pre>"},{"location":"datasets/text_classification_datasets/#synchronous-generation","title":"Synchronous Generation \ud83d\udd01","text":"<pre><code>import os\nfrom synthgenai import (\n    DatasetConfig,\n    DatasetGeneratorConfig,\n    LLMConfig,\n    TextClassificationDatasetGenerator,\n)\n\n# Setting the API keys\nos.environ[\"LLM_API_KEY\"] = \"\"\n\n# Creating the LLMConfig\nllm_config = LLMConfig(\n    model=\"model_provider/model_name\",\n    temperature=0.5,\n    top_p=0.9,\n    max_tokens=2048,\n)\n\n# Creating the DatasetConfig\ndataset_config = DatasetConfig(\n    topic=\"topic_name\",\n    domains=[\"domain1\", \"domain2\"],\n    language=\"English\",\n    additional_description=\"Additional description\",\n    num_entries=1000\n)\n\n# Creating the DatasetGeneratorConfig\ndataset_generator_config = DatasetGeneratorConfig(\n    llm_config=llm_config,\n    dataset_config=dataset_config,\n)\n\n# Creating the TextClassificationDatasetGenerator\ntext_classification_dataset_generator = TextClassificationDatasetGenerator(dataset_generator_config)\n\n# Generating the dataset\ntext_classification_dataset = text_classification_dataset_generator.generate_dataset()\n</code></pre>"},{"location":"datasets/text_classification_datasets/#asynchronous-generation","title":"Asynchronous Generation \ud83d\udd00","text":"<pre><code>import os\nimport asyncio\nfrom synthgenai import (\n    DatasetConfig,\n    DatasetGeneratorConfig,\n    LLMConfig,\n    TextClassificationDatasetGenerator,\n)\n\n# Setting the API keys\nos.environ[\"LLM_API_KEY\"] = \"\"\n\n# Creating the LLMConfig\nllm_config = LLMConfig(\n    model=\"model_provider/model_name\",\n    temperature=0.5,\n    top_p=0.9,\n    max_tokens=2048,\n)\n\n# Creating the DatasetConfig\ndataset_config = DatasetConfig(\n    topic=\"topic_name\",\n    domains=[\"domain1\", \"domain2\"],\n    language=\"English\",\n    additional_description=\"Additional description\",\n    num_entries=1000\n)\n\n# Creating the DatasetGeneratorConfig\ndataset_generator_config = DatasetGeneratorConfig(\n    llm_config=llm_config,\n    dataset_config=dataset_config,\n)\n\n# Creating the TextClassificationDatasetGenerator\ntext_classification_dataset_generator = TextClassificationDatasetGenerator(dataset_generator_config)\n\n# Generating the dataset asynchronously\ntext_classification_dataset = asyncio.run(text_classification_dataset_generator.agenerate_dataset())\n</code></pre>"},{"location":"examples/","title":"Examples \ud83d\udcd6","text":""},{"location":"examples/#examples-by-llm-api-providers","title":"Examples by LLM API Providers \ud83e\udd16","text":"API Provider Example File Anthropic anthropic_instruction_dataset_example.py Azure AI azure_ai_preference_dataset_example.py Azure azure_summarization_dataset_example.py Bedrock bedrock_raw_dataset_example.py Gemini gemini_langfuse_raw_dataset_example.py Groq groq_preference_dataset_example.py Hugging Face huggingface_instruction_dataset_example.py Mistral mistral_preference_dataset_example.py Ollama ollama_preference_dataset_example.py OpenAI openai_raw_dataset_example.py OpenRouter openrouter_raw_dataset_example.py SageMaker sagemaker_summarization_dataset_example.py Vertex AI vertex_ai_text_classification_dataset_example.py vLLM vllm_sentiment_analysis_dataset_example.py xAI xai_raw_dataset_example.py DeepSeek deepseek_instruction_dataset_example.py"},{"location":"examples/#examples-by-dataset-types","title":"Examples by Dataset Types \ud83d\udcda","text":"Dataset Type Example File Instruction Dataset anthropic_instruction_dataset_example.py, huggingface_instruction_dataset_example.py Preference Dataset azure_ai_preference_dataset_example.py, groq_preference_dataset_example.py, mistral_preference_dataset_example.py, ollama_preference_dataset_example.py Raw Dataset bedrock_raw_dataset_example.py, gemini_langfuse_raw_dataset_example.py, openai_raw_dataset_example.py Sentiment Analysis vllm_sentiment_analysis_dataset_example.py Summarization Dataset azure_summarization_dataset_example.py, sagemaker_summarization_dataset_example.py Text Classification vertex_ai_text_classification_dataset_example.py"},{"location":"installation/","title":"Installation \ud83d\udee0\ufe0f","text":"<p>To install the package, you can use the following command:</p> <pre><code>pip install synthgenai\n</code></pre> <p>or you can install the package directly from the source code using the following command:</p> <pre><code>git clone https://github.com/Shekswess/synthgenai.git\nuv build\npip install ./dist/synthgenai-{version}-py3-none-any.whl\n</code></pre>"},{"location":"installation/#requirements","title":"Requirements \ud83d\udccb","text":"<p>To use the package, you need to have the following requirements installed:</p> <ul> <li>Python 3.10+</li> <li>uv for building the package directly from the source code</li> <li>Ollama running on your local machine if you want to use Ollama as an API provider (optional)</li> <li>Langfuse running on your local machine or in the cloud if you want to use Langfuse for tracebility (optional)</li> <li>Hugging Face Hub account if you want to save the generated datasets on Hugging Face Hub with generated token (optional)</li> </ul>"},{"location":"llm_providers/","title":"Supported LLM Providers \ud83d\udcaa","text":"<p>The available API providers for LLMs are:</p> <ul> <li>Groq - more info about Groq models that can be used and how they can be used, can be found here</li> <li>Mistral AI - more info about Mistral AI models that can be used and how they can be used, can be found here</li> <li>Gemini - more info about Gemini models that can be used and how they can be used, can be found here</li> <li>Bedrock - more info about Bedrock models that can be used and how they can be used, can be found here</li> <li>Anthropic - more info about Anthropic models that can be used and how they can be used, can be found here</li> <li>OpenAI - more info about OpenAI models that can be used, and how they can be used, can be found here</li> <li>Hugging Face - more info about Hugging Face models that can be used, and how they can be used, can be found here</li> <li>Ollama - more info about Ollama models that can be used, and how they can be used, can be found here</li> <li>vLLM - more info about vLLM models that can be used and how they can be used, can be found here</li> <li>SageMaker - more info about SageMaker models that can be used and how they can be used, can be found here</li> <li>Azure - more info about Azure and Azure AI models that can be used and how they can be used, can be found here &amp; here</li> <li>Vertex AI - more info about Vertex AI models that can be used and how they can be used, can be found here</li> <li>DeepSeek - more info about DeepSeek models that can be used, can be found here</li> <li>xAI - more info about xAI models that can be used, can be found here</li> </ul>"},{"location":"quick_start/","title":"Quick Start \ud83d\ude80","text":"<p>Get up and running with SynthGenAI CLI in minutes! This guide covers installation, setup, and your first dataset generation.</p>"},{"location":"quick_start/#installation","title":"Installation \ud83d\udce6","text":"<p>To install the package, you can use the following command:</p> <pre><code>pip install synthgenai\n</code></pre> <p>or if you want to use uv package manager, you can use the following command:</p> <pre><code>uv add synthgenai\n</code></pre> <p>or you can install the package directly from the source code using the following commands:</p> <pre><code>git clone https://github.com/Shekswess/synthgenai.git\nuv build\npip install ./dist/synthgenai-{version}-py3-none-any.whl\n</code></pre>"},{"location":"quick_start/#setup-environment-variables","title":"Setup Environment Variables \ud83d\udd11","text":"<p>Before generating datasets, you'll need API keys for your chosen LLM provider. See all required environment variables:</p> <pre><code>synthgenai env-setup\n</code></pre>"},{"location":"quick_start/#quick-setup-example","title":"Quick Setup Example","text":"<p>For OpenAI (most common):</p> <pre><code># Set your OpenAI API key\nexport OPENAI_API_KEY=\"your_api_key_here\"\n\n# Or create a .env file\necho \"OPENAI_API_KEY=your_api_key_here\" &gt; .env\n</code></pre>"},{"location":"quick_start/#optional-enable-detailed-logging","title":"Optional: Enable Detailed Logging","text":"<p>For debugging or development, you can enable detailed logging:</p> <pre><code># Enable detailed logging (shows all debug information)\nexport SYNTHGENAI_DETAILED_MODE=\"false\"\n\n# Default NO logging (recommended for production)\nexport SYNTHGENAI_DETAILED_MODE=\"true\"\n</code></pre>"},{"location":"quick_start/#your-first-dataset","title":"Your First Dataset \ud83d\udcca","text":""},{"location":"quick_start/#1-generate-an-instruction-dataset","title":"1. Generate an Instruction Dataset","text":"<pre><code>synthgenai generate instruction \\\n  --model \"openai/gpt-4o\" \\\n  --topic \"Machine Learning\" \\\n  --domain \"Python Programming\" \\\n  --entries 100\n</code></pre>"},{"location":"quick_start/#2-generate-a-preference-dataset","title":"2. Generate a Preference Dataset","text":"<pre><code>synthgenai generate preference \\\n  --model \"anthropic/claude-3-5-sonnet-20241022\" \\\n  --topic \"Creative Writing\" \\\n  --domain \"Science Fiction\" \\\n  --temperature 0.8 \\\n  --entries 50\n</code></pre>"},{"location":"quick_start/#3-generate-raw-text-data","title":"3. Generate Raw Text Data","text":"<pre><code>synthgenai generate raw \\\n  --model \"gemini/gemini-1.5-flash\" \\\n  --topic \"Technology News\" \\\n  --domain \"Artificial Intelligence\" \\\n  --language \"English\" \\\n  --entries 200\n</code></pre>"},{"location":"quick_start/#cli-commands-overview","title":"CLI Commands Overview \ud83d\udccb","text":""},{"location":"quick_start/#essential-commands","title":"Essential Commands","text":"Command Description <code>synthgenai generate</code> Generate a synthetic dataset <code>synthgenai list-types</code> List available dataset types <code>synthgenai providers</code> Show supported LLM providers <code>synthgenai env-setup</code> Show required environment variables <code>synthgenai examples</code> Show example commands"},{"location":"quick_start/#dataset-types","title":"Dataset Types","text":"<p>SynthGenAI supports 6 dataset types:</p> <ul> <li>raw - Unstructured text data</li> <li>instruction - Instruction-following conversations</li> <li>preference - Preference data with chosen/rejected responses</li> <li>sentiment - Text with sentiment labels</li> <li>summarization - Text-to-summary pairs</li> <li>classification - Text classification with labels</li> </ul>"},{"location":"quick_start/#advanced-usage","title":"Advanced Usage \u26a1","text":""},{"location":"quick_start/#asynchronous-generation-faster","title":"Asynchronous Generation (Faster)","text":"<pre><code>synthgenai generate instruction \\\n  --model \"groq/llama-3.1-70b-versatile\" \\\n  --topic \"Data Science\" \\\n  --domain \"Statistics\" \\\n  --async \\\n  --entries 500\n</code></pre>"},{"location":"quick_start/#save-to-hugging-face-hub","title":"Save to Hugging Face Hub","text":"<pre><code># Set your HF token first\nexport HF_TOKEN=\"your_hf_token_here\"\n\nsynthgenai generate summarization \\\n  --model \"openai/gpt-4o\" \\\n  --topic \"News Articles\" \\\n  --domain \"Technology\" \\\n  --hf-repo \"myorg/tech-summaries\" \\\n  --entries 100\n</code></pre>"},{"location":"quick_start/#fine-tuned-generation-parameters","title":"Fine-Tuned Generation Parameters","text":"<pre><code>synthgenai generate preference \\\n  --model \"anthropic/claude-3-5-sonnet-20241022\" \\\n  --topic \"Code Review\" \\\n  --domain \"Python\" \\\n  --temperature 0.3 \\\n  --top-p 0.9 \\\n  --max-tokens 2048 \\\n  --entries 100\n</code></pre>"},{"location":"quick_start/#troubleshooting","title":"Troubleshooting \ud83d\udd27","text":""},{"location":"quick_start/#common-issues","title":"Common Issues","text":"<p>API Key Not Found:</p> <pre><code># Check your environment variables\necho $OPENAI_API_KEY\n\n# Or use the env-setup command\nsynthgenai env-setup\n</code></pre> <p>Model Not Found:</p> <pre><code># Check available providers and models\nsynthgenai providers\n\n# Use correct model format: provider/model-name\n# Example: \"openai/gpt-4o\" not \"gpt-4o\"\n</code></pre> <p>Generation Errors:</p> <pre><code># Use verbose mode for debugging\nsynthgenai generate instruction \\\n  --model \"openai/gpt-4o\" \\\n  --topic \"Test\" \\\n  --domain \"General\" \\\n  --verbose \\\n  --entries 10\n\n# Enable detailed logging for more debug information\nexport SYNTHGENAI_DETAILED_MODE=\"false\"\nsynthgenai generate instruction \\\n  --model \"openai/gpt-4o\" \\\n  --topic \"Test\" \\\n  --domain \"General\" \\\n  --entries 10\n</code></pre>"},{"location":"quick_start/#next-steps","title":"Next Steps \ud83d\udcda","text":"<ul> <li>\ud83d\udcd6 Explore Dataset Types for detailed information</li> <li>\u2699\ufe0f Learn about Configuration Options</li> <li>\ud83e\udd16 Check LLM Providers for provider-specific setup</li> <li>\ud83d\udcbb Browse Examples for code samples</li> <li>\ud83d\udee0\ufe0f See Contributing to contribute to the project</li> </ul>"},{"location":"quick_start/#need-help","title":"Need Help? \ud83d\udcac","text":"<ul> <li>\ud83d\udccb Run <code>synthgenai --help</code> for command help</li> <li>\ud83d\udca1 Run <code>synthgenai examples</code> for more examples</li> <li>\ud83d\udc1b Report issues on GitHub</li> <li>\ud83d\udcda Read the full documentation at synthgenai.docs</li> </ul>"}]}